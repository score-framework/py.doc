.. _tutorial_db:

Database Basics
===============

The database requires a so-called :term:`base class` to work with. Fortunately,
creating one is as easy as calling a single function. Let's create the
necessary folders and files for our database package. The first folder is
``blog/db``, which will contain our database models:

.. code-block:: console

    (moswblog)sirlancelot@spamalot:~/moswblog$ mkdir db

We will need to make this folder a python package by adding the file
``blog/db/__init__.py``. Usually it is completely sufficient to have an empty
file, as indicator for python that the folder is a python package. But we are
going to add an additional line to import everything from all sub-modules:

.. code-block:: python

    from score.init import import_from_submodules

    import_from_submodules()

This will allow us to access all models from all files in this folder under the
package *blog.db*. This will make a bit more sense once we have some classes,
so let's move on to creating our base class. Put the following into
``blog/db/storable.py``:

.. code-block:: python

    from score.db import create_base

    Storable = create_base()

We can now use this base class to define the rest of our models. Let's add the
users first as ``blog/db/user.py``:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,5

    from .storable import Storable
    from sqlalchemy import Column, String
    from sqlalchemy_utils.types.password import PasswordType

    class User(Storable):
        username = Column(String(100), nullable=False)
        password = Column(PasswordType(schemes=['pbkdf2_sha512']))


The next file is the one containing the blogs and articles and is called
``blog/db/article.py``:

.. code-block:: python
    :linenos:
    :emphasize-lines: 4,9

    from .storable import Storable
    from score.db import IdType
    from sqlalchemy import Column, String, ForeignKey
    from sqlalchemy.orm import relationship


    class Article(Storable):
        author_id = Column(IdType, ForeignKey('_blogger.id'), nullable=False)
        author = relationship('Blogger')
        title = Column(String(200), nullable=False)
        body = Column(String, nullable=False)


This time, we are using a nice feature of sqlalchemy: relationships. Every
*Article* has an author, which has to be a *User*. So we have to create a column
referencing that table. We will call this column *author_id*, so we can later
create a member *author*, which contains the actual object.  

The *author_id* consists of a single id field, which we configure with a
`foreign key`_ reference to the table containing our users. The name of a table
is automatically generated by converting the CamelCased class name to the same
name separated_by_underscores and prefixing it with an additional underscore.
We will soon see the reason for the additional underscore prefix.


Initializing the Database
-------------------------

The default configuration will write to a sqlite_ file, which is a database
engine which can store its entire database in a single file. You can change
the database in the configuration file ``development.conf``.

Now that we have defined all our classes, we need to create the database
tables, views, foreign keys, triggers, etc. We will use the command-line
application ``score`` for this purpose:

.. code-block:: console

    (moswblog)sirlancelot@spamalot:~/moswblog$ score db reset
      ...

This should generate a lot of output, while all required database entities are
created. You can connect to the database and inspect it, if you want:

.. code-block:: console

    (moswblog)sirlancelot@spamalot:~/moswblog$ sqlite3 database.sqlite3

.. code-block:: sqlite3

    SQLite version 3.8.7.4 2014-12-09 01:34:36
    Enter ".help" for usage hints.
    sqlite> .tables
    _administrator     _external_blogger  article            frontend_user    
    _article           _frontend_user     article_tag        internal_blogger 
    _article_tag       _internal_blogger  blog               user             
    _blog              _user              blogger          
    _blogger           administrator      external_blogger 
    sqlite> .schema _blogger
    CREATE TABLE _blogger (
        id INTEGER NOT NULL, 
        PRIMARY KEY (id), 
        FOREIGN KEY(id) REFERENCES _user (id)
    );
    CREATE TRIGGER autodel_blogger AFTER DELETE ON _blogger
    FOR EACH ROW BEGIN
      DELETE FROM _user WHERE id = OLD.id;
    END;
    sqlite> .quit

We have a table, as well as a view_ for each class we created earlier. You can
read up on the rationale behind this in the documentation of the
:mod:`score.db` module's :ref:`internals <db_view>`.

.. _sqlite: https://sqlite.org/about.html
.. _foreign key: https://en.wikipedia.org/wiki/Foreign_key
.. _view: https://en.wikipedia.org/wiki/View_%28SQL%29

..
    Lets start by replacing the home page with something more substantial. Fire up
    your favorite editor and edit the file ``moswblog/page/home.py`` to contain
    the following:

    .. code-block:: python

        from .router import router

        @router.route('/', 'home')
        def home(ctx):
            return 'Ni!'

    Congratulations! You have just written your first :term:`page`! Refreshing your
    browser should give you the new content.
