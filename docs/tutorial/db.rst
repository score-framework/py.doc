.. _tutorial_db:

Database Basics
===============

.. note::

    We will be editing various files from now on, most of which reside in a
    folder called ``moswblog``, which might lead to some confusion: We have
    already created a *project folder* called ``moswblog`` in our home
    directory during the setup step, above. Therein lies another folder with
    the same name, which is a *python package folder*.

    We are assuming that you have changed into your *project folder* (i.e.
    ~/moswblog) and provide the file names relative to this directory. This
    means that the absolute path of the file ``moswblog/db/user.py`` is
    actually ``~/moswblog/moswblog/db/user.py``, since it resides in the python
    package we have created for our project (using ``score projects``, above).

User
----

Let's create our database objects! For this, we will create a few files. Let's
start with the users in ``moswblog/db/user.py``:

.. code-block:: python
    :linenos:
    :emphasize-lines: 1,8

    from .base import Storable
    from sqlalchemy import (
        Column,
        String,
    )
    from sqlalchemy_utils.types.password import PasswordType

    class User(Storable):
        username = Column(String, nullable=False)
        password = Column(PasswordType(schemes=['pbkdf2_sha512']))

We can import our readily-configured Storable :ref:`base class <db_base>`
(line #1) and use it to create a class tree for the users of our system. As
the name suggests, the Base class needs to be the parent class of all classes
that should be persisted into the database (line #8).

Content
-------

The next file is the one containing the blogs and articles called
``moswblog/db/content.py``:

.. code-block:: python
    :linenos:
    :emphasize-lines: 15,16

    from .base import Storable
    from score.db import IdType
    from sqlalchemy import (
        Column,
        String,
        Boolean,
        DateTime,
        ForeignKey,
    )
    from sqlalchemy.orm import relationship


    class Blog(Storable):
        name = Column(String, nullable=False)
        owner_id = Column(IdType, ForeignKey('_internal_blogger.id'), nullable=False)
        owner = relationship('InternalBlogger')


    class Article(Storable):
        author_id = Column(IdType, ForeignKey('_blogger.id'), nullable=False)
        author = relationship('Blogger')
        blog_id = Column(IdType, ForeignKey('_blog.id'), nullable=False)
        blog = relationship('Blog')
        title = Column(String(200), nullable=False)
        teaser = Column(String, nullable=False)
        body = Column(String, nullable=False)

This time, we are using a nice feature of sqlalchemy: relationships. Every
blog has an owner, which has to be an InternalBlogger. So we have to create a
column referencing the other table. We will call this column *owner_id*, so
we can later create a member *owner*, which contains the actual object.

The *owner_id* consists of a single id field, which we configure with a
`foreign key`_ reference to the table containing our Internal Bloggers. The
name of a table is automatically generated by converting the CamelCased class
name to the same name separated_by_underscores and prefixing it with an
additional underscore.


Initializing the Database
-------------------------

The default configuration will write to a sqlite_ file, which is a database
engine which can store its entire database in a single file. You can change
the database in the configuration file ``development.conf``.

Now that we have defined all our classes, we need to create the database
tables, views, foreign keys, triggers, etc. We will use the command-line
application ``score`` for this purpose:

.. code-block:: console

    (moswblog)sirlancelot@spamalot:~/moswblog$ score db reset
      ...

This should generate a lot of output, while all required database entities are
created. You can connect to the database and inspect it, if you want:

.. code-block:: console

    (moswblog)sirlancelot@spamalot:~/moswblog$ sqlite3 database.sqlite3

.. code-block:: sqlite3

    SQLite version 3.8.7.4 2014-12-09 01:34:36
    Enter ".help" for usage hints.
    sqlite> .tables
    _administrator     _external_blogger  article            frontend_user    
    _article           _frontend_user     article_tag        internal_blogger 
    _article_tag       _internal_blogger  blog               user             
    _blog              _user              blogger          
    _blogger           administrator      external_blogger 
    sqlite> .schema _blogger
    CREATE TABLE _blogger (
        id INTEGER NOT NULL, 
        PRIMARY KEY (id), 
        FOREIGN KEY(id) REFERENCES _user (id)
    );
    CREATE TRIGGER autodel_blogger AFTER DELETE ON _blogger
    FOR EACH ROW BEGIN
      DELETE FROM _user WHERE id = OLD.id;
    END;
    sqlite> .quit

We have a table, as well as a view_ for each class we created earlier. You can
read up on the rationale behind this in the documentation of the
:mod:`score.db` module's :ref:`internals <db_view>`.

.. _sqlite: https://sqlite.org/about.html
.. _foreign key: https://en.wikipedia.org/wiki/Foreign_key
.. _view: https://en.wikipedia.org/wiki/View_%28SQL%29

..
    Lets start by replacing the home page with something more substantial. Fire up
    your favorite editor and edit the file ``moswblog/page/home.py`` to contain
    the following:

    .. code-block:: python

        from .router import router

        @router.route('/', 'home')
        def home(ctx):
            return 'Ni!'

    Congratulations! You have just written your first :term:`page`! Refreshing your
    browser should give you the new content.
